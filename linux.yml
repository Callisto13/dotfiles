---
- hosts: all
  tags: [linux]
  vars:
    downloads_dir: /tmp/downloads
    git_apps:
      chruby: https://github.com/postmodern/chruby.git
      ruby-install:  https://github.com/postmodern/ruby-install.git
      fasd: https://github.com/clvv/fasd.git

  tasks:
  - name: ensure downloads directory exists
    file: path={{downloads_dir}} state=directory

  - name: get bash-it
    git:
      repo: https://github.com/Bash-it/bash-it.git
      dest: ~/.bash_it

  - name: install bash-it
    command: ~/.bash_it/install.sh --silent

  - name: get TPM
    git:
      repo: https://github.com/tmux-plugins/tpm
      dest: ~/.tmux/plugins/tpm

  - file: path=~/bin state=directory mode=0755

  - name: set up symlinks
    file:
      path: "{{item.target}}"
      src: "{{item.src}}"
      state: link
      force: yes
    with_items:
    - {target: ~/.bash_it/custom/k8s_completion.bash, src: "{{ansible_env.PWD}}/config/bash/k8s_completion.bash"}
    - {target: ~/.git-authors, src: "{{ansible_env.PWD}}/config/.git-authors-c"}
    - {target: ~/.bash_it/custom/ngrok.bash, src: "{{ansible_env.PWD}}/config/bash/ngrok.bash"}
    - {target: ~/.bash_it/custom/custom.bash, src: "{{ansible_env.PWD}}/config/bash/custom_c.bash"}
    - {target: ~/.ruby-version, src: "{{ansible_env.PWD}}/config/.ruby-version"}
    - {target: ~/.tmux.conf, src: "{{ansible_env.PWD}}/config/tmux.conf"}
    - {target: ~/bin/load-key, src: "{{ansible_env.PWD}}/executables/load-key"}
    - {target: ~/bin/gotta-push-em-all, src: "{{ansible_env.PWD}}/executables/gotta-push-em-all.sh"}
    - {target: ~/.bash_it/custom/brew.bash, src: "{{ansible_env.PWD}}/config/bash/brew.bash"}
    - {target: ~/.bash_it/custom/env.bash, src: "{{ansible_env.PWD}}/config/bash/env.bash"}
    - {target: ~/.bash_it/custom/git.bash, src: "{{ansible_env.PWD}}/config/bash/git.bash"}
    - {target: ~/.bash_it/custom/profile.bash, src: "{{ansible_env.PWD}}/config/bash/profile.bash"}
    - {target: ~/.bash_it/custom/terminal.bash, src: "{{ansible_env.PWD}}/config/bash/terminal.bash"}
    - {target: ~/.gitconfig-shared, src: "{{ansible_env.PWD}}/config/.gitconfig-shared"}
    - {target: ~/.hushlogin, src: "{{ansible_env.PWD}}/config/.hushlogin"}
    - {target: ~/.vimrc, src: "{{ansible_env.PWD}}/config/.vimrc"}
    - {target: ~/.vimrc.local.plugins, src: "{{ansible_env.PWD}}/config/.vimrc.local.plugins"}

  - name: add apt repositories
    become: yes
    become_method: sudo
    apt_repository: repo={{ item }}
    with_items:
    - ppa:git-core/ppa
    - ppa:neovim-ppa/unstable

  - name: add Google Cloud repository
    become: yes
    become_method: sudo
    lineinfile: dest=/etc/apt/sources.list.d/google-cloud-sdk.list line='deb https://packages.cloud.google.com/apt cloud-sdk main' create=yes

  - name: add Google Cloud repository key
    become: yes
    become_method: sudo
    apt_key: url=https://packages.cloud.google.com/apt/doc/apt-key.gpg

  - name: add VirtualBox repository
    become: yes
    become_method: sudo
    lineinfile: dest=/etc/apt/sources.list.d/virtualbox.list line="deb http://download.virtualbox.org/virtualbox/debian {{ansible_distribution_release}} contrib" create=yes

  - name: add VirtualBox repository key
    become: yes
    become_method: sudo
    apt_key: url=https://www.virtualbox.org/download/oracle_vbox_2016.asc

  - name: install Vagrant
    become: yes
    become_method: sudo
    apt:
      deb: https://releases.hashicorp.com/vagrant/2.2.13/vagrant_2.2.13_x86_64.deb

  - name: install apt packages
    become: yes
    become_method: sudo
    apt:
      state: latest
      update_cache: yes
      name:
      - ack-grep
      - apt-transport-https
      - ca-certificates
      - gnupg
      - build-essential
      - cmake
      - curl
      - direnv
      - exuberant-ctags
      - fonts-inconsolata
      - git
      - google-cloud-sdk
      - htop
      - lastpass-cli
      - mercurial
      - neovim
      - pkg-config
      # - python-dev
      # - python-pip
      # - python3-dev
      # - python3-pip
      - shellcheck
      - silversearcher-ag
      - tree
      - vim
      - vim-nox
      - virtualbox-6.1
      - wget
      - xclip
        #- ngrok-client
      - ripgrep
      # For tmux
      - libevent-dev
      - libncurses5-dev

  - name: download ngrok
    get_url: url=https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip dest={{downloads_dir}}/ngrok.zip

  - name: extract ngrok
    unarchive: copy=no src={{downloads_dir}}/ngrok.zip dest={{downloads_dir}} creates={{downloads_dir}}/ngrok

  - name: download kind
    become: yes
    become_method: sudo
    get_url: url=https://github.com/kubernetes-sigs/kind/releases/download/v0.7.0/kind-linux-amd64 dest=/usr/local/bin

  - name: chmod kind
    become: yes
    become_method: sudo
    command: chmod +x /usr/local/bin/kind

  - name: clone vim config
    git:
      repo: https://github.com/masters-of-cats/a-new-hope
      dest: ~/.config/nvim
      force: yes

  - name: add custom vim plugins
    lineinfile:
      path: ~/.config/nvim/init.vim
      insertafter: 'plugged'
      line: 'silent source ~/.vimrc.local.plugins'

  - name: add custom vim config
    lineinfile:
      path: ~/.config/nvim/init.vim
      insertafter: EOF
      line: 'silent source ~/.vimrc'

  - name: remove stupid vim mappings
    lineinfile:
      path: ~/.config/nvim/init.vim
      state: absent
      regexp: ';;'

  - name: install vim plugins and binaries
    command: nvim --headless +PlugInstall +PlugUpdate +GoUpdateBinaries +qall

  - name: update remote plugins
    command: nvim --headless +UpdateRemotePlugins +qall

  # - name: install pip3
  #   pip: name=pip state=latest extra_args=--user executable=/usr/bin/pip3

  - name: install neovim pip3 package
    pip: name=neovim state=latest extra_args=--user

  - name: install neovim pip package
    pip: name=neovim state=latest extra_args=--user #executable=/usr/bin/pip

  - name: download go
    get_url: url=https://golang.org/dl/go1.15.4.linux-amd64.tar.gz dest={{downloads_dir}}/go.tar.gz

  - name: extract go
    become: yes
    become_method: sudo
    unarchive: copy=no src={{downloads_dir}}/go.tar.gz dest=/usr/local creates=/usr/local/go

  - name: ensure git-apps directory exists
    file: path=~/git-apps state=directory

  - name: checkout git apps
    git: repo={{ item.value }} dest=~/git-apps/{{ item.key }} force=yes
    with_dict: "{{ git_apps }}"

  - name: install git apps
    become: yes
    become_method: sudo
    make: target=install chdir={{ ansible_env.HOME }}/git-apps/{{ item.key }}
    with_dict: "{{ git_apps }}"

  - name: download git duet
    get_url: url=https://github.com/git-duet/git-duet/releases/download/0.7.0/linux_amd64.tar.gz dest={{downloads_dir}}/git-duet.tar.gz

  - name: install git duet
    unarchive: copy=no src={{downloads_dir}}/git-duet.tar.gz dest={{ ansible_env.HOME }}/.local/bin creates={{ ansible_env.HOME }}/.local/bin/git-duet

  - name: ~/.gitconfig
    blockinfile:
      path: ~/.gitconfig
      create: yes
      block: |
        [include]
          path = ~/.gitconfig-shared

  - name: install git-co-authored-by-hook
    environment:
      GIT_DUET_CO_AUTHORED_BY: 1
    command: bash -c "git solo \"$( grep authors -A 1 ~/.git-authors | tail -1 | cut -d ':' -f 1 | tr -d '[:space:]' )\""
